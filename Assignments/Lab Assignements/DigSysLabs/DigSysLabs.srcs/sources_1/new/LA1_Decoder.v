`timescale 1ns / 1ps
/*
Number: (Encoding)
2 -> 000
3 -> 001
4 -> 010
5 -> 011
6 -> 100
7 -> 101
8 -> 110
9 -> 111

Range:
Convert decimal representation of any number from 0 to 31 (both inclusive) to 5-bit binary (a5,a4,a3,a2,a1,a0)
*/

module LA1_Decoder(op, in, sel);
input [4:0]in;
input [2:0]sel;
output reg [31:0]op;

integer i;
reg [5:0]j;
reg [31:0]out;

always @(*) 
begin
    for(i=0; i<=31; i=i+1) 
    begin
        op[i] = 0;
    end
    
    for(j=6'b000000; j <= in; j=j+sel+6'b000010) 
    begin
        case (j)
        6'b000000: assign out = 32'b00000000000000000000000000000001;
        6'b000001: assign out = 32'b00000000000000000000000000000010;
        6'b000010: assign out = 32'b00000000000000000000000000000100;
        6'b000011: assign out = 32'b00000000000000000000000000001000;
        6'b000100: assign out = 32'b00000000000000000000000000010000;
        6'b000101: assign out = 32'b00000000000000000000000000100000;
        6'b000110: assign out = 32'b00000000000000000000000001000000;
        6'b000111: assign out = 32'b00000000000000000000000010000000;
        6'b001000: assign out = 32'b00000000000000000000000100000000;
        6'b001001: assign out = 32'b00000000000000000000001000000000;
        6'b001010: assign out = 32'b00000000000000000000010000000000;
        6'b001011: assign out = 32'b00000000000000000000100000000000;
        6'b001100: assign out = 32'b00000000000000000001000000000000;
        6'b001101: assign out = 32'b00000000000000000010000000000000; 
        6'b001110: assign out = 32'b00000000000000000100000000000000;  
        6'b001111: assign out = 32'b00000000000000001000000000000000; 
        6'b010000: assign out = 32'b00000000000000010000000000000000; 
        6'b010001: assign out = 32'b00000000000000100000000000000000; 
        6'b010010: assign out = 32'b00000000000001000000000000000000; 
        6'b010011: assign out = 32'b00000000000010000000000000000000; 
        6'b010100: assign out = 32'b00000000000100000000000000000000; 
        6'b010101: assign out = 32'b00000000001000000000000000000000; 
        6'b010110: assign out = 32'b00000000010000000000000000000000; 
        6'b010111: assign out = 32'b00000000100000000000000000000000; 
        6'b011000: assign out = 32'b00000001000000000000000000000000; 
        6'b011001: assign out = 32'b00000010000000000000000000000000; 
        6'b011010: assign out = 32'b00000100000000000000000000000000; 
        6'b011011: assign out = 32'b00001000000000000000000000000000; 
        6'b011100: assign out = 32'b00010000000000000000000000000000; 
        6'b011101: assign out = 32'b00100000000000000000000000000000; 
        6'b011110: assign out = 32'b01000000000000000000000000000000; 
        6'b011111: assign out = 32'b10000000000000000000000000000000; 
        default: assign out = 32'b00000000000000000000000000000000;
    endcase
    op = (op | out);
    end
end
   
endmodule
